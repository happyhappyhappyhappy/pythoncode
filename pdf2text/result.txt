ARC083 / ABC074 解説

三谷庸 (wo01)

2017 年 9 月 16 日

For International Readers: English editorial starts on page 6.

A 問題

N (cid:2) N のマス目にはマスが N 2 個あります。そのうち A マスを白く塗る

ので、黒く塗るマスは N 2 (cid:0) A 個あります。

したがって、入力から N , A を読み込んで N 2 (cid:0) A を出力すればよいこと

になります。

以下に C++ によるコード例を示します。

#include<cstdio>

using namespace std;

int main(){

int N, A;
scanf("%d%d", &N, &A);

printf("%d\n", N * N - A);
return 0;

}

B 問題

i 番目のボールは i 番目のタイプ A のロボット、または i 番目のタイプ B
のロボットで回収できます。タイプ A のロボットで回収するときはロボット
の移動距離は 2xi となり、タイプ B のロボットで回収するときはロボットの
移動距離は 2(K (cid:0) xi) となります。

i = 1; 2; : : : ; N について順にボールの位置を見ていき、2xi と 2(K (cid:0) xi)
のうち小さい方 (同じであるときはその値) を足し合わせれば答えが求まり
ます。

1

以下に C++ によるコード例を示します (このコード例ではループの各段

階ではなく最後に答えを 2 倍しています)。

#include<cstdio>
#include<algorithm>

using namespace std;

const int MAX_N = 100;

int N, K;
int X[MAX_N];

int main(){

scanf("%d", &N);

scanf("%d", &K);
for(int i = 0; i < N; ++i){
scanf("%d", X + i);

}
int ans = 0;

for(int i = 0; i < N; ++i){

int tmp = min(X[i], K - X[i]);
ans += tmp;

}
printf("%d\n", ans * 2);

return 0;

}

C 問題

ビーカーにちょうど x [g] の水を入れられる必要十分条件は、非負整数 i; j
が存在して x = 100Ai + 100Bj となることです。同様に、ビーカーに y [g]
の砂糖を入れられる必要十分条件は、非負整数 i; j が存在して y = Ci + Dj
となることです。

x; y としては F 以下の値だけを考えればよいので、x; y としてありうる値

は O(F 2) 時間かけてすべての i; j を試すことで列挙できます。

最後に、すべての (x; y) の組 (O(F 2) 個しかありません) について、ビー
カーに水を x [g] と砂糖を y [g] 入れたときに砂糖が水にすべて溶けているか
どうか調べ、溶けているものについて濃度が最大のものをとって出力すれば

よいです。

2

D 問題

都市を頂点、道路を辺としてグラフ理論の言葉で説明します。

条件を満たすグラフが存在するとき、任意の頂点 u, v について、これら
の間には辺がないか、長さ Au;v の辺があるかのどちらかとなります。なぜ
なら、

(cid:15) u, v の間に Au;v よりも長い辺があった場合、この辺は取り除いても最

短距離に影響を与えず、

(cid:15) u, v の間に Au;v よりも短い辺があった場合、u, v 間の最短距離は明

らかに Au;v よりも短くなる

からです。

グラフ G を任意の u, v の間に長さ Au;v の辺を張ったグラフとします。上

の考察より、G の部分グラフに関してのみ考えればよいことになります。

どの頂点間に辺を張る必要があるか考えます。
A (の対角線上以外の要素) のうち Au;v が最小値であるとき、A が最短距
離を表す表であるようなグラフには u と v を長さ Au;v で結ぶ辺が必要です。
なぜなら、そうでないとすると他の頂点 w を経由して頂点 u から頂点 v ま
で距離 Au;v で移動できる必要がありますが、そのとき頂点 u と頂点 w の距
離は Au;v よりも小さくなるからです。

同様に G のすべての辺について短い方から見ていくことで、求めるべきグ
ラフは以下のとおりであることがわかります (G から辺 fu; bg を取り除いた
グラフを Gnfu; vg と書いています)。

(cid:15) ある u, v について、Gnfu; vg における uv 最短距離が Au;v 未満であ

るとき、条件を満たすグラフは存在しない。

(cid:15) そうでないとき、Gnfu; vg における uv 最短距離が Au;v より大きいよ

うな u, v に限り辺を張ったグラフが求めるべきグラフである。

Gnfu; vg における uv 最短路の長さを A′

u;v と
Au;v の大小を比較するために、まず G における全点対最短距離を Warshall-
Floyd 法を用いて求め、その値を B とします。

u;v と書くことにします。A′

Bu;v < Au;v となる u; v が存在するとき、この u; v について、A′
< Au;v となります。よって条件を満たすグラフは存在しません。
あとは、任意の u; v について Au;v = Bu;v であったとして、A′
等しいか、それより大きいかを判定できればよいことになります。A′
であることは、以下と同値です。

u;v = Bu;v

u;v が Au;v と
u;v = Au;v

9w; u ̸= w; v ̸= w; Bu;v = Bu;w + Bw;v

(1)

3

実際、A′

u;v = Au;v のとき、w として Gnfu; vg における uv 最短路上の頂
点をとれます。逆に、上のような w が取れるとき、G における w を通った
uv 最短路は Gnfu; vg における uv 最短路にもなっています。

よって、条件を満たすグラフが存在するとき、答えは条件 (1) を満たす u; v

について Au;v(= A′

u;v = Bu;v) の和をとったものになります。

N をグラフの頂点の数とするとき、B を求めるための Warshall-Floyd 法
の計算量は O(N 3) です。また、条件 (1) は各 u; v について O(N ) で確かめ
られるので、全体の計算量は O(N 3) です。以上から、アルゴリズム全体の
計算量は O(N 3) となるので、十分高速です。

E 問題

頂点 v の子孫について色と重みの割り当てができているとして、頂点 v の
色と重みを決めることを考えます。頂点 v の直接の子を u1; u2; : : : ; uk とし
ます。

各 ui について、ui およびそのすべての子孫に割り当てた色を反転させて
も、頂点 ui およびその子孫への色と重みの割り当ては条件を満たしたまま
です。また、これらの頂点のうち頂点 v と異なる色の重みの和 y はできるだ
け小さくしたほうが v の先祖に色と重みを割り当てやすくなります。

よって、頂点 v を根とする部分木に含まれる頂点の色と重みを決めるには、

次の問題を解けばよいことになります。

(cid:15) u1; u2; : : : ; uk のうちいくつかを v と同じ色に、それら以外を v と異な
る色に塗り、v の子孫 (v を除く) に含まれる v と同じ色の頂点の重み
の和を Xv 以下にできるか。できる場合、それらの頂点のうち v と異
なる色であるものの重みの和の最小値はいくらか。

この問題は、x1; x2; : : : ; xk (ただし xi = Xui) の情報の他に、ui を根とす
る部分木に含まれる頂点であって ui と異なる色のものの重みの和 yi の情報
がわかれば、動的計画法により解くことができます。

与えられた木の頂点を根から遠い順に並べ、それぞれについて上の動的計

画法を行うことで、与えられた木全体への色と重みの割り当てが可能かどう

か判定できます。

F 問題

まず、与えられた点集合から、以下のようなグラフ G を構築します。

(cid:15) 頂点集合は (X; 1); (X; 2); : : : ; (X; N ); (Y; 1); (Y; 2); : : : ; (Y; N ) の 2N

個。これらにそれぞれ番号 0; 1; : : : ; 2N (cid:0) 1 を付ける。

4

(cid:15) 頂点 (X; x) と頂点 (Y; y) は、ある i が存在して xi = x かつ yi = y で

あるときに限り辺で結ばれている。

(cid:15) それら以外に辺は存在しない。

グラフ G の頂点はボールを回収するロボットに、辺は回収されるボールに
対応します。また、辺 fu; vg に対応するボールは、頂点 u または頂点 v に
対応するロボットによってのみ回収できます。以下、このグラフに関する問

題として考えることにします。

まず、G の連結成分に頂点の数と辺の数が異なるものが存在する場合、答
えは 0 です。そうでない場合、G の連結成分ごとに順序を数えられれば十分
であるので、以下では G が連結であるとして説明します。

ロボットの起動順序を考える前に、ロボットとそれが回収するボールの対

応付けの方法を考えます。

2N 頂点 2N 辺のグラフにはサイクルがちょうど 1 つあります。このサイ
クルに含まれない頂点に対応するロボットについては、それが回収すべきボー

ルは一意に決まります。また、サイクルに含まれる頂点に対応するロボット

については、回収すべきボールとの対応付けが (サイクル全体で) 2 とおりに
決まります。これらを両方試すことにすると、ロボットとボールの対応付け

が定まったことになります。

次に、ロボットの起動順序について考えます。
グラフ G において頂点 v は頂点 u1 < u2 < (cid:1) (cid:1) (cid:1) ; uk に隣接しているとしま
す。また、頂点 v に対応するロボットは辺 fv; uig に対応するボールを回収
することになっているとします。このとき、頂点 u1; u2; : : : ; ui(cid:0)1 に対応する
ロボットは頂点 v に対応するロボットよりも先に起動する必要があります。
また、この条件がすべての v に対して満たされていれば、決めた対応のとお
りにロボットがボールを回収できることもわかります。

グラフ G と同じ頂点集合について、各頂点 v について v から上の記法に
おける u1; u2; : : : ; ui(cid:0)1 に向けた辺を張ったグラフを G′ とします。このグラ
フ G′ は森になるので、G′ 上で動的計画法を行うことで求める順序の個数が
得られます。

以上で答えが求まりました。

5

ARC083 / ABC074 Editorial

wo01

September 16, 2017

A

#include<cstdio>

using namespace std;

int main(){

int N, A;
scanf("%d%d", &N, &A);
printf("%d\n", N * N - A);
return 0;

}

1

B

#include<cstdio>
#include<algorithm>

using namespace std;

const int MAX_N = 100;

int N, K;
int X[MAX_N];

int main(){

scanf("%d", &N);
scanf("%d", &K);
for(int i = 0; i < N; ++i){
scanf("%d", X + i);

}
int ans = 0;
for(int i = 0; i < N; ++i){

int tmp = min(X[i], K - X[i]);
ans += tmp;

}
printf("%d\n", ans * 2);
return 0;

}

2

C

We can pour exactly x grams of water if there exist non-negative integers i; j
such that x = 100Ai + 100Bj. Similarly, we can pour exactly y grams of sugar
if there exist non-negative integers i; j such that y = Ci + Dj.

Since x; y (cid:20) F , we can generate all possible values of x; y in O(F 2) time.
Finally, for each possible pair (x; y) (There are O(F 2) such pairs), consider
the case where we put x grams of water and y grams of sugar, check whether it
satis(cid:12)es the conditions, and compute the maximum density.

3

D

If there exist three vertices u; v; w such that Au;v + Av;w < Au;w, the distances
are contradictory, thus you should output (cid:0)1. From now on, we assume that
there are no such triplets.

We call a (unordered) pair of two distinct vertices (u; v) important if there

exists no w such that w ̸= u; w ̸= v; Au;w + Aw;v = Au;v.

(cid:15) If (u; v) is important, the shortest path between u and v must not pass
through other vertices. Thus, we must add an edge between u and v with
cost Au;v.

(cid:15) If (u; v) is not important, we don’t need to add any edges between these
vertices. For some w, it satis(cid:12)es Au;w + Aw;v = Au;v, and you can just
follow the shortest path between u and w and the shortest path between
w and v.

Therefore, the answer is the sum of Au;v over all important pairs (u; v).

4

E

Suppose that we’ve already decided the colors and weights of all descendants of
v, and among those vertices, the conditions are satis(cid:12)ed. The only things that
matter for the decision of colors and weights of other vertices (ancestors of v)
are:

(cid:15) The sum of weights of all black vertices in the subtree rooted at v.

(cid:15) The sum of weights of all white vertices in the subtree rooted at v.

One of these two values must be exactly Xv. To make things better in the
future, we want to minimize the other value. Let dp[v] be the minimum of the
other value.

How can we compute dp[v]? Let u1; u2; : : : ; uk be the children of v. Without

loss of generality, we can assume that v is black.

We keep two values: B (the sum of weights of black vertices) and W (the
sum of weights of white vertices). They are initialized to zeroes. Now, for each
ui, we do one of the following:

(cid:15) Make ui black: add Xui to B and dp[ui] to W .
(cid:15) Make ui white: add dp[ui] to B and Xui to W .

After that, we want to minimize the value of W , under the constraint that

B must be at most Xv. This can be done in O(kXv) by a simple DP.

5

F

First, construct a graph G as follows:

(cid:15) There are 2N vertices: X1; : : : ; XN ; Y1; : : : ; YN . (Also, let’s number the

vertices 0; 1; : : : ; 2N (cid:0) 1 in this order.)

(cid:15) For each i, add an edge between two vertices Xxi and Yyi .

Each vertex in G corresponds to a robot, and each edge in G corresponds to
a ball. An edge (ball) between two vertices u and v can be collected by either
vertex (robot) u or vertex (robot) v.

For each connected component in this graph, the number of edges and ver-
tices must be the same. Otherwise, the answer is 0. We will assume that the
graph is connected (otherwise, solve the problem independently for each com-
ponent and combine the results). Thus, we have a connected graph with 2N
vertices and 2N edges.

How can we assign edges to vertices? The graph contains exactly one cycle,
and for edges in the cycle, there are two ways to assign them to vertices. For
other edges, the assignment can be uniquely determined.

Let’s (cid:12)x an assignment of edges to vertices.

In how many ways can we

activate the vertices to satisfy this assignment?

Suppose that in the graph G, a vertex v is adjacent to vertices u1 < u2 <
(cid:1) (cid:1) (cid:1) ; uk. Also, suppose that v is assigned to the edge fv; uig. Then, the vertices
u1; u2; : : : ; ui(cid:0)1 must be activated before v. These conditions are suﬃcient: if
this is satis(cid:12)ed for all v, the robots can collect all balls.

Now, construct another graph G′: for each v, add an edge from v to u1; u2; : : : ; ui(cid:0)1

in G′. The answer is the number of topological orderings in this graph. Since
G′ is a (directed) forest, it’s east to compute the answer.

6


