{
	// Place your wrk ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Submit snippet for python3": {
  	"prefix": "yamaatcoderpy2025",
  	"body": [
    "# ライブラリのインポート",
    "# import heapq,copy",
    "import pprint as pp",
    "import sys",
    "",
    "# from collections import deque",
    "# pypy3用",
    "# import pypyjit",
    "# 再帰制御解放",
    "# pypyjit.set_param('max_unroll_recursion=-1')",
    "# sys.setrecursionlimit(10**6)",
    "from logging import DEBUG, StreamHandler, getLogger",
    "",
    "# 入力のマクロ",
    "def II(): return int(sys.stdin.readline())",
    "def SI(): return sys.stdin.readline().strip()",
    "def MI(): return map(int, sys.stdin.readline().split())",
    "def LI(): return list(map(int, sys.stdin.readline().split()))",
    "def LLI(rows_number:int): return [LI() for _ in range(rows_number)]",
    "",
    "# デバッグ出力の作成",
    "logger = getLogger(__name__)",
    "handler = StreamHandler()",
    "handler.setLevel(DEBUG)",
    "logger.setLevel(DEBUG)",
    "logger.addHandler(handler)",
    "logger.propagate = False",
    "",
    "# クラス+メソッドを一関数",
    "xdebug=logger.debug",
    "ppp=pp.pprint",
    "# Const",
    "MAXSIZE = ( 1 << 59 ) -1",
    "MINSIZE = -( 1 << 59) + 1",
    "",
    "",
    "def solver():",
    "    res = 0",
    "    return res",
    "",
    "",
    "if __name__ == \"__main__\":",
    "    res=solver()",
    "",
    "  "
  ],
  "description": "AtcoderForpython3のスニペット"
}
}