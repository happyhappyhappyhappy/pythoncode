{
	// Place your python ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"atcoder templete":{
		"scope":"python",
		"prefix": "atdtmp",
		"body":[
			"# Problem: $2",
			"# Python $1 Try",
			"",
			"import sys",
			"# from collections import defaultdict",
			"# import heapq,copy",
			"import pprint as pp",
			"# from collections import deque",
			"def II(): return int(sys.stdin.readline())",
			"def MI(): return map(int, sys.stdin.readline().split())",
			"def LI(): return list(map(int, sys.stdin.readline().split()))",
			"def LLI(rows_number): return [LI() for _ in range(rows_number)]",
			"\n\n# Const",
			"MAXSIZE = ( 1 << 31 ) -1",
    		"MINSIZE = -( 1 << 31) + 1",
			"\n\ndef solver():",
			"\tresult = 0",
			"\t# algorithm",
			"\treturn result",
			"\n\nif __name__ == \"__main__\":",
			"    print(\"{}\".format(solver()))",
			""
		],
		"description": "Atcoderに使えそうな表現"
	},
	"print two variables":{
		"scope":"python",
		"prefix": "p2",
		"body": [
			"print(\"{}{}\".format($1,$2))"
		],
		"description": "print 2変数"
	},
	"print one variables":{
		"scope":"python",
		"prefix": "p1",
		"body": [
			"print(\"{}\".format($1))"
		],
		"description": "print 1変数"
	},
	"各問題ごとのREADMEを作成する": {
		"prefix": "yamareadmemd",
		"body": [
		"# \\[問題番号\\]\\<問題名\\>",
		"",
		"## [問題のURL]()",
		"",
		"## [解説のURL]()",
		"",
		"## [この問題の結果]()",
		"",
		"---",
		"",
		"ヒント",
		"",
		"| 回数 | 達成日 | 言語 |",
		"| --- | ----- | ---- |",
		"| 1回目 |  |  |",
		"| 2回目 |  |  |",
		"| 3回目 |  |  |",
		""
		],
		"description": "各問題ごとのREADMEを作成する"
		},
		"yamapythonsimple": {
			"prefix": "yamapythonsimpleold2",
			"body": [
			  "import sys",
			  "import pprint as pp",
			  "input2 = sys.stdin.readline",
			  "def II(): return int(sys.stdin.readline())",
			  "def MI(): return map(int, sys.stdin.readline().split())",
			  "def LI(): return list(map(int, sys.stdin.readline().split()))",
			  "def LLI(rows_number): return [LI() for _ in range(rows_number)]",
			  "",
			  "",
			  "# Const",
			  "MAXSIZE = ( 1 << 31 ) -1",
			  "MINSIZE = -( 1 << 31) + 1",
			  "",
			  "",
			  "if __name__ == \"__main__\":",
			  "    x = 1",
			  "    print(\"{}\".format(x))"
			],
			"description": "pythonかなりシンプル"
		  },
		  "pythonデバッグのコピペ": {
			"prefix": "yamadebug",
			"body": [
			  "from logging import getLogger, StreamHandler, DEBUG",
			  "logger = getLogger(__name__)",
			  "handler = StreamHandler()",
			  "handler.setLevel(DEBUG)",
			  "logger.setLevel(DEBUG)",
			  "logger.addHandler(handler)",
			  "logger.propagate = False",
			  "",
			  "logger.debug('デバッグの例')"
			],
			"description": "デバッグのコピペ"
		  },"pythonスニペット202301": {
			"prefix": "yamapython202301",
			"body": [
			  "# ライブラリのインポート",
			  "# import heapq,copy",
			  "import pprint as pp",
			  "import sys",
				"",
			  "# from collections import deque",
			  "# pypy3用",
			  "# import pypyjit",
			  "# 再帰制御解放",
			  "# pypyjit.set_param('max_unroll_recursion=-1')",
			  "# sys.setrecursionlimit(10**6)",
			  "from logging import DEBUG, StreamHandler, getLogger",
			  "",
			  "# 入力のマクロ",
			  "def II(): return int(sys.stdin.readline())",
			  "def SI(): return sys.stdin.readline().strip()",
			  "def MI(): return map(int, sys.stdin.readline().split())",
			  "def LI(): return list(map(int, sys.stdin.readline().split()))",
			  "def LLI(rows_number:int): return [LI() for _ in range(rows_number)]",
			  "",
			  "# デバッグ出力の作成",
			  "logger = getLogger(__name__)",
			  "handler = StreamHandler()",
			  "handler.setLevel(DEBUG)",
			  "logger.setLevel(DEBUG)",
			  "logger.addHandler(handler)",
			  "logger.propagate = False",
			  "",
			  "# クラス+メソッドを一関数",
			  "xdebug=logger.debug",
			  "ppp=pp.pprint",
			  "# Const",
			  "MAXSIZE = ( 1 << 59 ) -1",
			  "MINSIZE = -( 1 << 59) + 1",
			  "",
			  "",
			  "\n\ndef solver():",
			  "\tresult = 0",
			  "\t# algorithm",
			  "\treturn result",
			  "\n\nif __name__ == \"__main__\":",
			  "\tprint(solver())"
			],
			"description": "pythonスニペット202301"
		  }
}
