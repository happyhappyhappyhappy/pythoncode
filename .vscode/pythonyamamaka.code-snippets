{
	// Place your python ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"atcoder templete":{
		"scope":"python",
		"prefix": "atdtmp",
		"body":[
			"# Problem: ",
			"# Python $1 Try",
			"",
			"import sys",
			"# from collections import defaultdict",
			"# import heapq,copy",
			"# from collections import deque",
			"int1 = lambda x: int(x) - 1",
//			"chmax = lambda x,y: y = x if x < y else x = y",
//			"chmin = lambda x,y: y = x if y < x else x = y",
			"p2D = lambda x: print(*x, sep=\"\\n\")",
			"def II(): return int(sys.stdin.readline())",
			"def MI(): return map(int, sys.stdin.readline().split())",
			"def MI1(): return map(int1, sys.stdin.readline().split())",
			"def LI(): return list(map(int, sys.stdin.readline().split()))",
			"def LLI(rows_number): return [LI() for _ in range(rows_number)]",
			"",
			"",
			"def solver():",
			"\tresult = 0",
			"\t# algorithm",
			"\treturn result",
			"",
			"",
			"if __name__ == \"__main__\":",
			"    print(\"{}\".format(solver()))",
			""
		],
		"description": "Atcoderに使えそうな表現"
	}
}